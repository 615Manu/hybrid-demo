# Configure our own gateway to allow traffic in to `svc.b.remote` (i.e. this indicates we're cluster b)
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: ingress-gateway
spec:
  # select the istio-ingressgateway service
  selector:
    istio: ingressgateway
  # allow any HTTP traffic for a hosts ending in svc.b.remote
  servers:
  - hosts:
    - "*.svc.b.remote"
    port:
      number: 80
      protocol: HTTP
      name: http
  # TODO: HTTPS
  # - hosts:
  #   - "*.svc.b.remote"
  #   port: 443
  #   protocol: HTTPS
---
# Expose our test-server service over the Gateway as `test-server.svc.b.remote`
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: b-remote-test-server
spec:
  gateways:
  - ingress-gateway
  - mesh
  hosts:
  - test-server.svc.b.remote
  http:
  - route:
    - destination:
        # note we assume we're in the same namespace as the test-server and don't use a FQDN
        host: test-server
---
###########################################################
#### Generated by github.com/ZackButcher/join-clusters ####
###########################################################
# apiVersion: networking.istio.io/v1alpha3
# kind: ServiceEntry
# metadata:
#   name: a-ingress
# spec:
#   hosts:
#   - test-server.svc.a.remote
#   ports: 
# #  - number: 443
# #    name: HTTPS
# #    protocol: HTTPS
#   - number: 80
#     name: HTTP
#     protocol: HTTP	
#   resolution: STATIC
#   endpoints:
#   - address: INGRESS_IP_ADDRESS
#     ports:
# #      HTTPS: 443
#       HTTP: 80
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: a-virtual-service
  namespace: default
spec:
  hosts:
  - "*.svc.a.remote"
  http:
  - match:
    - port: 80
    route:
    - destination:
        host: a-ingress
#  tcp:
#  - match:
#    - port: 443
#    route:
#    - destination:
#        host: a-ingress
---
# apiVersion: networking.istio.io/v1alpha3
# kind: DestinationRule
# metadata:
#   name: a-ingress
#   namespace: default
# spec:
#   host: a-ingress.default.svc.cluster.local
#   trafficPolicy:
#     loadBalancer:
#       simple: LEAST_CONN
---
# short term hack to verify behavior
apiVersion: v1
kind: Service
metadata:
  name: a-ingress
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
  selector: {}
---
kind: Endpoints
apiVersion: v1
metadata:
  name: a-ingress
subsets:
  - addresses:
      - ip: INGRESS_IP_ADDRESS
    ports:
      - port: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-dns
  namespace: kube-system
data:
  stubDomains: |
    {"remote": ["CORE_DNS_IP"]}