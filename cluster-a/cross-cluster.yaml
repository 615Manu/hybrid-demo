# Configure our own gateway to allow traffic in to `svc.b.remote` (i.e. this indicates we're cluster b)
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: ingress-gateway
spec:
  # select the istio-ingressgateway service
  selector:
    istio: ingressgateway
  # allow any HTTP traffic for a hosts ending in svc.b.remote
  servers:
  - hosts:
    - "*.svc.a.remote"
    port:
      number: 80
      protocol: HTTP
      name: http
  # TODO: HTTPS
  # - hosts:
  #   - "*.svc.b.remote"
  #   port: 443
  #   protocol: HTTPS
---
# Expose our test-server service over the Gateway as `test-server.svc.b.remote`
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: a-remote-test-server
spec:
  gateways:
  - ingress-gateway
  hosts:
  - test-server.svc.a.remote
  http:
  - route:
    - destination:
        # note we assume we're in the same namespace as the test-server and don't use a FQDN
        host: test-server
---
###########################################################
#### Generated by github.com/ZackButcher/join-clusters ####
###########################################################
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: b-ingress
spec:
  hosts:
    - "*.svc.b.remote"
  ports: 
#  - number: 443
#    name: HTTPS
#    protocol: HTTPS
  - number: 80
    name: HTTP
    protocol: HTTP	
  resolution: STATIC
  endpoints:
  # TODO: update to real IP
  - address: 35.230.100.127
    ports:
#      HTTPS: 443
      HTTP: 80
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: b-virtual-service
spec:
  hosts:
  - "*.svc.b.remote"
  http:
  - match:
    - port: 80
    route:
    - destination:
        host: b-ingress
#  tcp:
#  - match:
#    - port: 443
#    route:
#    - destination:
#        host: b-ingress